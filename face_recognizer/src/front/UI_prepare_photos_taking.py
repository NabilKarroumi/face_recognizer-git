# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'prepare_photos_taking.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtWidgets
from face_recognizer.raw_UIs.prepare_photos_taking import Ui_datasets_preparation
from face_recognizer.src.front.UI_automatic_photos_taker import CustomAutomaticPhotosTakerWindow
from face_recognizer.src.front.UI_manual_photos_taker import CustomManualPhotosTakerWindow


def get_all_item_in_QListWidget(list_widget):

    assert type(
        list_widget) == QtWidgets.QListWidget, 'Make sure the argument is a QListWidget object'

    items = []
    for x in range(list_widget.count()):
        items.append(list_widget.item(x).text())
    return items


class CustomDatasetPreparationWindow(Ui_datasets_preparation):

    def __init__(self, current_working_directory):
        self.current_working_directory = current_working_directory

    def setupUi(self, datasets_preparation):
        self.datasets_preparation = datasets_preparation
        super().setupUi(self.datasets_preparation)

        self.confirmation_btn.clicked.connect(self.settings_confirmed)
        self.add_btn.clicked.connect(self.add_name_to_list)
        self.remove_btn.clicked.connect(self.remove_name_from_list)

    def add_name_to_list(self):
        items = get_all_item_in_QListWidget(self.ListWidget)

        if self.enter_name_editline.text() != '' and self.enter_name_editline.text() not in items:
            self.ListWidget.addItem(self.enter_name_editline.text())
            self.enter_name_editline.clear()

        self.ListWidget.sortItems()

    def remove_name_from_list(self):
        # only a selected item in the list can be removed
        if self.ListWidget.currentItem():
            self.ListWidget.takeItem(self.ListWidget.currentRow())
            print(self.ListWidget.count())
            # print(self.ListWidget.currentItem())
            # print(type(self.ListWidget.currentItem()))
        # self.ListWidget.addItem(self.enter_name_editline.text())
        # self.enter_name_editline.clear()

    def settings_confirmed(self):
        items = get_all_item_in_QListWidget(self.ListWidget)
        if bool(items) and self.model_name_editline.text() != '':  # At leat one name in the list
            # get the combobox content
            if self.comboBox.currentText() == 'Manually':
                self.manual_photos_taker = QtWidgets.QWidget()
                self.ui = CustomManualPhotosTakerWindow(
                    items, self.current_working_directory, self.model_name_editline.text())
                self.ui.setupUi(self.manual_photos_taker)
                self.manual_photos_taker.show()
                self.datasets_preparation.hide()
            else:
                self.automatic_photos_taker = QtWidgets.QWidget()
                self.ui = CustomAutomaticPhotosTakerWindow(
                    items, self.current_working_directory, self.model_name_editline.text())
                self.ui.setupUi(self.automatic_photos_taker)
                self.automatic_photos_taker.show()
                self.datasets_preparation.hide()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    datasets_preparation = QtWidgets.QMainWindow()
    ui = CustomDatasetPreparationWindow('./tests')
    ui.setupUi(datasets_preparation)
    datasets_preparation.show()
    sys.exit(app.exec_())
