# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'manual_photos_taker.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import cv2
import numpy as np

from PyQt5 import QtCore, QtGui, QtWidgets
from face_recognizer.src.back.process_data import process_data
from face_recognizer.raw_UIs.manual_photos_taker import Ui_Manual_photos_taker


class VideoThread(QtCore.QThread):
    change_pixmap_signal = QtCore.pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = True
        self.cv_img = None

    def run(self):
        # capture from web cam
        cap = cv2.VideoCapture(0)
        while self._run_flag:
            ret, cv_img = cap.read()
            if ret:
                self.change_pixmap_signal.emit(cv_img)
                self.cv_img = cv_img
        # shut down capture system
        cap.release()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False
        self.wait()


class CustomManualPhotosTakerWindow(Ui_Manual_photos_taker):

    def __init__(self, names, current_working_directory, model_name):
        """
                                        :param names: list containing the different face labels
                                        :type: list(str)

                                        :param current_working_directory: CWD
                                        :type: str
        """
        self.current_working_directory = current_working_directory
        self.initial_images_path = os.path.join(
            self.current_working_directory, 'initial_images')
        self.names = names
        self.model_name = model_name

    def setupUi(self, Manual_photos_taker):
        self.Manual_photos_taker = Manual_photos_taker
        super().setupUi(self.Manual_photos_taker)

        self.disply_width = 648
        self.display_height = 480

        self.process_data_btn.clicked.connect(self.launch_data_processing)

        for name in self.names:
            self.comboBox.addItem(name)

        self.take_phots_btn.clicked.connect(self.takePhotoManually)

        # create the video capture thread
        self.thread = VideoThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()

    def closeEvent(self, event):
        self.thread.stop()
        event.accept()

    # @QtCore.pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        """Updates the image_container_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.image_container_label.setPixmap(qt_img)

    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QtGui.QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(
            rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(
            self.disply_width, self.display_height, QtCore.Qt.KeepAspectRatio)
        return QtGui.QPixmap.fromImage(p)

    def takePhotoManually(self):
        directory = os.path.join(
            self.initial_images_path, self.comboBox.currentText())

        # create directory if not existing
        if os.path.isdir(directory) is False:
            os.makedirs(directory, exist_ok=True)

        new_img_index = '{:04}'.format(len(os.listdir(directory)))
        photo_path = os.path.join(directory, self.comboBox.currentText().lower() + '_' + str(new_img_index) +
                                  '.jpg')

        cv2.imwrite(photo_path, self.thread.cv_img)

    # def launch_data_processing(self):
    #     process_data(self.current_working_directory)

    def popupWindow(self, window_title, text, icon, informative_text, buttons_number):
        message = QtWidgets.QMessageBox()
        message.setWindowTitle(window_title)
        message.setText(text)
        message.setStyleSheet(
            """
            QWidget {
                background-color: rgb(46, 46, 46); 
                color: #ffffff;
            }
            QPushButton {
                    color: #ffffff;
                    background-color: none;
                    border: 2px solid rgb(0, 170, 255);
                    border-radius: 10px;
                    width: 50px;
                    height: 20px;
            }
            QPushButton:hover {
                border: 2px solid rgb(255, 0, 0);
            }
            QPushButton:pressed {
                background-color: rgb(100, 100, 100);
            }
            """)

        message.setIcon(icon)

        if buttons_number == 2:
            message.setStandardButtons(
                QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Abort)
        elif buttons_number == 1:
            message.setStandardButtons(QtWidgets.QMessageBox.Ok)
        else:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('Excepted "buttons_number" values: 1 or 2, given: {}'.format(
                buttons_number))
            if error_dialog.exec() == 'QtWidgets.QMessageBox.Ok':
                sys.exit(1)

        message.setInformativeText(informative_text)

        buttonReply = message.exec()

        return buttonReply

    def launch_data_processing(self):
        buttonReply = self.popupWindow(
            "Data Processing",
            """You are about to process the data you have recorded.\n
            This step is mandatory before feeding and training the FacesRecognizer tool.\n
            However, the processing phase can take a while.\n""",
            QtWidgets.QMessageBox.Warning,
            "If you want to proceed, please push 'Ok'\nIf you want to add more data, push 'Abort'.",
            2)

        if buttonReply == QtWidgets.QMessageBox.Ok:
            self.thread.stop()  # stop webcam
            self.Manual_photos_taker.hide()  # hide window
            # print('OK for data processing')
            from face_recognizer.src.back.process_data import process_data  # adjime !
            process_data(self.current_working_directory)
            model_saving_path = self.launch_model_training(
                self.current_working_directory, self.model_name)
            self.launch_FaceRecognizer(model_saving_path, self.names)
        elif buttonReply == QtWidgets.QMessageBox.Abort:
            pass
            # print('ABORT data processing')

    def launch_model_training(self, current_working_directory, model_name):
        buttonReply = self.popupWindow(
            "Model training",
            """CONGRATULATIONS, the data have been processed successfully !\n
            The application 'FaceRecognizer' will know be trained on these data!\n""",
            QtWidgets.QMessageBox.Information,
            "Please push 'Ok' to start the training phase\n",
            1)

        if buttonReply == QtWidgets.QMessageBox.Ok:
            from face_recognizer.src.back.build_model import train_model
            return train_model(current_working_directory, model_name)

    def launch_FaceRecognizer(self, model_saving_path, classes):
        buttonReply = self.popupWindow(
            "FaceRecognizer launcher",
            "CONGRATULATIONS, the learning phase has been completed successfully !\n",
            QtWidgets.QMessageBox.Information,
            "Please push 'Ok' to start the training phase\n",
            1)

        if buttonReply == QtWidgets.QMessageBox.Ok:
            print('OK for starting the application')
            from face_recognizer.src.back.faceRecognizer import main
            main(model_saving_path, classes)


if __name__ == "__main__":

    from face_recognizer.src.back.utils import read

    current_working_directory = r'D:\\Users\\KARROUMI Nabil\\Desktop\\ApprendrePython\\PROJECTS\\FacesRecognition\\Restructure\\tests'

    names = read(os.path.join(current_working_directory,
                              os.path.join('default', 'names_list.txt')))
    # names.sort()

    model_name = 'my_model'

    import sys
    app = QtWidgets.QApplication(sys.argv)
    Manual_photos_taker = QtWidgets.QWidget()
    ui = CustomManualPhotosTakerWindow(
        names, current_working_directory, model_name)
    ui.setupUi(Manual_photos_taker)
    Manual_photos_taker.show()
    sys.exit(app.exec_())
